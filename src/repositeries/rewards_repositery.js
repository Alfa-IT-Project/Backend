import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();
// Prisma schema should include:
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt

// The timestamps will be auto-generated by Prisma
// Create a new reward
async function createReward(data) {
  return await prisma.reward.create({ data });
}

// Get all rewards
async function getAllRewards() {
  return await prisma.reward.findMany({
    include: { tier: true }
  });
}

// Get reward by ID
async function getRewardById(id) {
  const reward = await prisma.reward.findUnique({
    where: { id },
    include: { tier: true }
  });

  if (!reward) {
    throw new Error('Reward not found');
  }

  return reward;
}

// Update reward
async function updateReward(id, data) {
  return await prisma.reward.update({
    where: { id },
    data
  });
}

// Delete reward
async function deleteReward(id) {
  return await prisma.reward.delete({
    where: { id }
  });
}

// Redeem points logic - you might need to adjust this based on your business rules
async function redeemPoints(userId, points) {
  const customer = await prisma.customer.findUnique({
    where: { id: userId }
  });

  if (!customer) throw new Error('Customer not found');
  if (customer.pointCount < points) throw new Error('Not enough points');

  const updatedCustomer = await prisma.customer.update({
    where: { id: userId },
    data: { pointCount: { decrement: points } }
  });

  return updatedCustomer;
}

// Get all tiers
async function getAllTiers() {
  return await prisma.tier.findMany();
}

export {
  createReward,
  getAllRewards,
  getRewardById,
  updateReward,
  deleteReward,
  redeemPoints,
  getAllTiers
};

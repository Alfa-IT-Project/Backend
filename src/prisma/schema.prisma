generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Role {
    general_manager
    customer
    product_manager
    delivery_manager
    driver
    supplier_manager
    STAFF
    ADMIN
}

model User {
    id        String   @id @default(uuid())
    username  String  @unique
    password  String
    name      String  @default("Unknown")
    email     String  @unique
    department String? @db.VarChar(191)
    phoneNumber String? @db.VarChar(191)
    emergencyContact String? @db.VarChar(191)
    address String? @db.VarChar(191)
    city String? @db.VarChar(191)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    settings  UserSettings?
    otps      OTP[]
    role      Role

    customer  Customer?
    // Relations
    leaveRequests LeaveRequest[]
    payrollRecords PayrollRecord[]
    payrolls Payroll[]
    performanceReviews PerformanceReview[]
    schedules ScheduleEntry[]
    attendanceLogs Attendance[]
    swapRequestsAsRequester SwapRequest[] @relation("Requester")
    swapRequestsAsRequested SwapRequest[] @relation("Requested")
}

model Customer {
  notes      String?
  id         String     @id @map("user_id")
  pointCount Int        @default(0)
  tierId     Int?
  tier       Tier?      @relation(fields: [tierId], references: [id])
  user       User       @relation(fields: [id], references: [id], onDelete: Cascade)
  purchases  Purchase[]
  @@index([tierId], map: "Customer_tierId_fkey")
}

model Purchase {
  purchase_id     Int                  @id @default(autoincrement())
  user_id         String
  total_amount    Decimal              @db.Decimal(10, 2)
  shipping_fee    Decimal              @db.Decimal(10, 2)
  grand_total     Decimal              @db.Decimal(10, 2)
  order_date      DateTime
  deliveryDetails DeliveryItemDetails?
  customer        Customer             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items           PurchaseItem[]

  @@index([user_id], map: "Purchase_user_id_fkey")
}

model Item {
  item_id      Int            @id @default(autoincrement())
  price        Decimal        @db.Decimal(65, 2)
  category     String
  date_added   DateTime
  product_name String
  quantity     Int
  supplierId   Int
  
  PurchaseItem PurchaseItem[]
  Warranty     Warranty?

  @@index([supplierId], map: "Item_supplierId_fkey")
}

model PurchaseItem {
  id          Int      @id @default(autoincrement())
  purchase_id Int
  item_id     Int
  quantity    Int
  item        Item     @relation(fields: [item_id], references: [item_id], onDelete: Cascade)
  purchase    Purchase @relation(fields: [purchase_id], references: [purchase_id], onDelete: Cascade)

  @@unique([purchase_id, item_id])
  @@index([item_id], map: "PurchaseItem_item_id_fkey")
}

model Warranty {
  warranty_id Int      @id @default(autoincrement())
  expiry_date DateTime
  item_id     Int      @unique
  item        Item     @relation(fields: [item_id], references: [item_id], onDelete: Cascade)
}

model Tier {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  pointLevel Int
  customers  Customer[]
  rewards    Reward[]
}

model Reward {
  id           Int      @id @default(autoincrement())
  tierType     String
  name         String
  offer        String
  generateDate DateTime @default(now())
  expireDate   DateTime
  notes        String?
  tierId       Int
  tier         Tier     @relation(fields: [tierId], references: [id])

  @@index([tierId], map: "Reward_tierId_fkey")
}

model Order {
  id          Int      @id @default(autoincrement())
  name        String   // Supplier name
  email       String   // Supplier email
  productName String   // Name of the product being ordered
  quantity    Int      // Quantity of the product being ordered
  requireDate DateTime
  remarks     String?
  createdAt   DateTime @default(now())
 
  deliveryStatus String @default("pending")
  supplierId  Int
  
  supplier    Supplier @relation(fields: [supplierId], references: [id])

  
  @@index([supplierId], map: "Order_supplierId_fkey")
}

model Supplier {
  id      Int     @id @default(autoincrement())
  name    String
  sid     String
  email   String? @unique
  contact String?
  address String?
  remarks String?
  nic     String?
  gender  String?
  
  orders  Order[]
}

model DeliveryItemDetails {
  TrackingID            Int      @id @default(autoincrement())
  Description           String
  Client_Name           String
  Delivery_address      String
  Contact_Number        String
  Email                 String
  Assigned_Date         String
  Expected_DeliveryDate String?
  Comments              String?
  purchaseId            Int      @unique
  purchase              Purchase @relation(fields: [purchaseId], references: [purchase_id])
}


model LeaveRequest {
  id            String   @id @default(uuid())
  userId        String   @db.VarChar(191)
  type          LeaveType
  startDate     DateTime
  endDate       DateTime
  reason        String   @db.Text
  status        LeaveStatus @default(PENDING)
  managerComment String? @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id])
}

enum LeaveType {
  SICK
  ANNUAL
  CASUAL
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Payroll {
  id          String   @id @default(uuid())
  userId      String   @db.VarChar(191)
  month       DateTime
  baseSalary  Decimal  @db.Decimal(10, 2)
  allowances  Json
  deductions  Json
  netSalary   Decimal  @db.Decimal(10, 2)
  generatedAt DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id])
}

model PayrollRecord {
  id          String   @id @default(uuid())
  userId      String   @db.VarChar(191)
  month       String   @db.VarChar(191)
  year        String   @db.VarChar(191)
  baseSalary  Decimal  @db.Decimal(10, 2)
  overtimePay Decimal  @db.Decimal(10, 2)
  bonus       Decimal  @db.Decimal(10, 2)
  deductions  Decimal  @db.Decimal(10, 2)
  netSalary   Decimal  @db.Decimal(10, 2)
  status      PayrollStatus @default(PENDING)
  paymentDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum PayrollStatus {
  PENDING
  APPROVED
  PAID
}

model ScheduleEntry {
  id          String   @id @default(uuid())
  userId      String   @db.VarChar(191)
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  role        String   @db.VarChar(191)
  shiftType   String   @db.VarChar(191)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  swapRequests SwapRequest[]
}

model SwapRequest {
  id              String   @id @default(uuid())
  requesterId     String   @db.VarChar(191)
  requestedWithId String   @db.VarChar(191)
  originalEntryId String   @db.VarChar(191)
  status          SwapStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  originalEntry   ScheduleEntry @relation(fields: [originalEntryId], references: [id])
  requester       User          @relation("Requester", fields: [requesterId], references: [id])
  requestedWith   User          @relation("Requested", fields: [requestedWithId], references: [id])
}

enum SwapStatus {
  PENDING
  APPROVED
  REJECTED
}

model Attendance {
  id           String   @id @default(uuid())
  userId       String   @db.VarChar(191)
  date         DateTime
  clockInTime  DateTime?
  clockOutTime DateTime?
  status       AttendanceStatus
  location     String?  @db.VarChar(191)
  clockIn      DateTime?
  clockOut     DateTime?

  // Relations
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

enum AttendanceStatus {
  ON_TIME
  LATE
  ABSENT
  HALF_DAY
}

model PerformanceReview {
  id                  String   @id @default(uuid())
  userId              String   @db.VarChar(191)
  rating              Int
  feedback            String   @db.Text
  goals               String   @db.Text
  strengths           Json     // Array of strings
  areasForImprovement Json     // Array of strings
  period              String   @db.VarChar(191) // Format: YYYY-Q
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id])

  @@map("performance_reviews")
}

model UserSettings {
  id        String   @id @default(uuid())
  userId    String   @unique @db.VarChar(191)
  timeZone  String   @default("UTC+5:30")
  dateFormat String  @default("DD/MM/YYYY")
  emailNotifications Boolean @default(true)
  leaveRequestNotifications Boolean @default(true)
  scheduleChangeNotifications Boolean @default(true)
  language String   @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

model OTP {
  id        String   @id @default(uuid())
  userId    String   @db.VarChar(191)
  otp       String   @db.VarChar(191)
  type      OTPType
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

enum OTPType {
  CLOCK_IN
  CLOCK_OUT
  PASSWORD_RESET
} 